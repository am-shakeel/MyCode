package DP;

import java.util.ArrayList;
import java.util.List;

public class PermuteAString {

	public static void main(String[] args) {
	
		//System.out.println( permute (new int[] { 1, 2, 3} ) );
		
		permutation("", "abc") ; 
	}
	
	private static void permutation(String prefix, String str) {
	    int n = str.length();
	    if (n == 0) System.out.print(prefix +  " " );
	    else {
	        for (int i = 0; i < n; i++)
	            permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n));
	    }
	}
	
	public static List<List<Integer>> permute(int[] originalArray) {
		
	    List<List<Integer>> allPermutations = new ArrayList<>();
	    
	    generateAllPermutations(new ArrayList<>(), originalArray, allPermutations);
	    
	    return allPermutations;
	    
	  }

	  private static void generateAllPermutations( List<Integer> runningChoices, int[] originalArray, List<List<Integer>> allPermutations) {
		  
	    if (runningChoices.size() == originalArray.length) {
	      allPermutations.add(new ArrayList<>(runningChoices));
	      return;
	    }

	    /*
	      Every stack frame of this function call represents the expression of trying (almost) all items in every "slot" in the array.
	      The recursion stops when we are choosing on 1 past the final "slot".
	    */
	    
	    for (int i = 0; i < originalArray.length; i++) {
	      
	      int choice = originalArray[i];

	      
	      // Skip if element already exists in 'runningChoices'
	      if (runningChoices.contains(choice)) {
	        continue;
	      }

	      
	      // 1.) Choose - Add the item to the 'runningChoices'
	      runningChoices.add(choice);

	      
	      // 2.) Explore - Recurse on the choice
	      generateAllPermutations(runningChoices, originalArray, allPermutations);

	      
	      // 3.) Unchoose - We have returned from the recursion, remove the choice we made.
	      // The next iteration will try another item in the "slot" we are working on.
	      runningChoices.remove(runningChoices.size() - 1);
	      
	      
	    }
	  }
	
}